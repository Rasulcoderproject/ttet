import os
import json
import re
import httpx
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse

app = FastAPI()

# --- –í –ø–∞–º—è—Ç–∏ ---
sessions = {}
feed = {}
stats = {}
feedback_sessions = {}

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "")
OWNER_ID = str(os.getenv("MY_TELEGRAM_ID", ""))

TELEGRAM_SEND_MAX = 3900

# ---- –£—Ç–∏–ª–∏—Ç—ã ----
def chunk_string(s: str, size=TELEGRAM_SEND_MAX):
    return [s[i:i+size] for i in range(0, len(s), size)]

def safe_json(obj):
    try:
        return json.dumps(obj, indent=2, ensure_ascii=False)
    except Exception:
        return str(obj)

async def send_message(chat_id, text, reply_markup=None, parse_mode="Markdown"):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    body = {"chat_id": str(chat_id), "text": str(text)}
    if reply_markup:
        body["reply_markup"] = reply_markup
    if parse_mode:
        body["parse_mode"] = parse_mode
    async with httpx.AsyncClient() as client:
        r = await client.post(url, json=body)
        return r

async def answer_callback_query(callback_query_id):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery"
    async with httpx.AsyncClient() as client:
        await client.post(url, json={"callback_query_id": callback_query_id})

async def ask_gpt(prompt: str):
    if not OPENROUTER_API_KEY:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç OPENROUTER_API_KEY"
    try:
        async with httpx.AsyncClient() as client:
            res = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": "openai/gpt-3.5-turbo",
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": 0.7,
                },
            )
            data = res.json()
            if res.status_code != 200:
                return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + data.get("error", {}).get("message", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è")
            return data["choices"][0]["message"]["content"]
    except Exception as e:
        print("askGPT error:", e)
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."

# ---- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----
@app.post("/api/webhook")
async def telegram_webhook(req: Request):
    try:
        update = await req.json()
    except Exception as e:
        print("Bad JSON:", e)
        return PlainTextResponse("Bad JSON", status_code=400)

    print("üì© –ü–æ–ª—É—á–µ–Ω update:", update.get("update_id"))

    # 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    from_id = str(
        update.get("message", {}).get("from", {}).get("id")
        or update.get("edited_message", {}).get("from", {}).get("id")
        or update.get("callback_query", {}).get("from", {}).get("id")
        or update.get("inline_query", {}).get("from", {}).get("id")
        or ""
    )
    is_owner = from_id and OWNER_ID and from_id == OWNER_ID

    msg_text = (
        update.get("message", {}).get("text")
        or update.get("edited_message", {}).get("text")
        or update.get("callback_query", {}).get("data")
        or update.get("inline_query", {}).get("query")
        or ""
    )

    # /reply –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if is_owner and isinstance(msg_text, str) and msg_text.startswith("/reply "):
        parts = msg_text.split(" ")
        target_id = parts[1] if len(parts) > 1 else None
        reply_text = " ".join(parts[2:]) if len(parts) > 2 else None
        if not target_id or not reply_text:
            await send_message(OWNER_ID, "‚ö† –§–æ—Ä–º–∞—Ç: /reply <chat_id> <—Ç–µ–∫—Å—Ç>")
        else:
            await send_message(target_id, reply_text)
            await send_message(OWNER_ID, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        return PlainTextResponse("ok")

    # 2) –ü–µ—Ä–µ—Å—ã–ª–∫–∞ JSON –∞–ø–¥–µ–π—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
    if not is_owner and OWNER_ID:
        header = f"üì° –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (update_id: {update.get('update_id','‚Äî')})\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–ø–¥–µ–π—Ç–∞ (JSON):\n"
        body = safe_json(update)
        payload = header + body
        for chunk in chunk_string(payload, TELEGRAM_SEND_MAX):
            await send_message(OWNER_ID, f"```json\n{chunk}\n```", parse_mode="Markdown")

    # 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä
    chat_id = (
        update.get("message", {}).get("chat", {}).get("id")
        or update.get("edited_message", {}).get("chat", {}).get("id")
        or update.get("callback_query", {}).get("message", {}).get("chat", {}).get("id")
    )

    if update.get("callback_query"):
        cqid = update["callback_query"]["id"]
        try:
            await answer_callback_query(cqid)
        except:
            pass

    if chat_id:
        chat_id_str = str(chat_id)
        first_name = (
            update.get("message", {}).get("from", {}).get("first_name")
            or update.get("edited_message", {}).get("from", {}).get("first_name")
            or update.get("callback_query", {}).get("from", {}).get("first_name")
            or ""
        )

        if update.get("message", {}).get("contact"):
            contact = update["message"]["contact"]
            await send_message(chat_id_str, f"‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä: +{contact['phone_number']}")
            await send_message(
                OWNER_ID,
                f"üìû –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:\n–ò–º—è: {contact.get('first_name')}\n–¢–µ–ª–µ—Ñ–æ–Ω: +{contact.get('phone_number')}\nID: {contact.get('user_id')}"
            )
            return PlainTextResponse("ok")

        text = (
            update.get("message", {}).get("text")
            or update.get("edited_message", {}).get("text")
            or update.get("callback_query", {}).get("data")
            or ""
        )

        try:
            await process_game_logic(chat_id_str, str(text or ""), first_name)
        except Exception as e:
            print("processGameLogic error:", e)

    return PlainTextResponse("ok")

# ---- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ----
async def process_game_logic(chat_id, text, first_name):
    session = sessions.get(chat_id, {})

    def update_stats(local_id, game, win):
        if local_id not in stats:
            stats[local_id] = {}
        if game not in stats[local_id]:
            stats[local_id][game] = {"played": 0, "wins": 0}
        stats[local_id][game]["played"] += 1
        if win:
            stats[local_id][game]["wins"] += 1

    # /start
    if text == "/start" or text == "–ù–∞–∑–∞–¥":
        sessions[chat_id] = {"firstName": first_name}
        await send_message(
            chat_id,
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name or '–¥—Ä—É–≥'}! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∞ –∏–ª–∏ –∏–≥—Ä—É:",
            reply_markup={
                "keyboard": [
                    [{"text": "–ò—Å—Ç–æ—Ä–∏—è"}, {"text": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"}],
                    [{"text": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"}, {"text": "–ò–≥—Ä—ã üé≤"}],
                    [{"text": "/feedback"}, {"text": "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", "request_contact": True}],
                ],
                "resize_keyboard": True,
            },
        )
        return

    # /feedback
    if text == "/feedback":
        feedback_sessions[chat_id] = True
        await send_message(chat_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
        return

    if feedback_sessions.get(chat_id):
        del feedback_sessions[chat_id]
        fn = sessions.get(chat_id, {}).get("firstName")
        await send_message(
            OWNER_ID,
            f"üí¨ –û—Ç–∑—ã–≤ –æ—Ç {fn or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {chat_id})\n–¢–µ–∫—Å—Ç: {text}"
        )
        await send_message(OWNER_ID, f"/reply {chat_id}")
        await send_message(chat_id, "‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return

    # /stats
    if text == "/stats":
        user_stats = stats.get(chat_id)
        if not user_stats:
            await send_message(chat_id, "–¢—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª –Ω–∏ –≤ –æ–¥–Ω—É –∏–≥—Ä—É.")
            return
        msg = "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        for game, s in user_stats.items():
            msg += f"‚Ä¢ {game}: —Å—ã–≥—Ä–∞–Ω–æ {s['played']}, –ø–æ–±–µ–¥ {s['wins']}\n"
        await send_message(chat_id, msg)
        return

    # –ò–≥—Ä—ã –º–µ–Ω—é
    if text == "–ò–≥—Ä—ã üé≤":
        await send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup={
            "keyboard": [
                [{"text": "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"}, {"text": "–ù–∞–π–¥–∏ –ª–æ–∂—å"}],
                [{"text": "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é"}, {"text": "–®–∞—Ä–∞–¥–∞"}],
                [{"text": "–ù–∞–∑–∞–¥"}, {"text": "/stats"}],
            ],
            "resize_keyboard": True,
        })
        return

    # –¢–µ—Å—Ç—ã: –ò—Å—Ç–æ—Ä–∏—è, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
    if text in ["–ò—Å—Ç–æ—Ä–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"]:
        prompt = f"""
–ó–∞–¥–∞–π –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–º–µ \"{text}\".
–§–æ—Ä–º–∞—Ç:
–í–æ–ø—Ä–æ—Å: ...
A) ...
B) ...
C) ...
D) ...
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ... (A-D)
""".strip()
        reply = await ask_gpt(prompt)
        match = re.search(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*([A-D])", reply, re.I)
        correct = match.group(1).upper() if match else None
        if not correct:
            await send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return
        question = re.sub(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*[A-D]", "", reply).strip()
        sessions[chat_id] = {"correctAnswer": correct}
        await send_message(chat_id, f"üìö –í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ *{text}*:\n\n{question}")
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç
    if "correctAnswer" in session:
        user_answer = text.strip().upper()
        correct = session["correctAnswer"]
        del sessions[chat_id]["correctAnswer"]
        if user_answer == correct:
            await send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            await send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")
        return

    # --- –ú–∏–Ω–∏-–∏–≥—Ä—ã (–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ / –ù–∞–π–¥–∏ –ª–æ–∂—å / –ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é / –®–∞—Ä–∞–¥–∞) ---
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–∑ JS: ask_gpt(prompt), –ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç, –∫–ª–∞—Å—Ç—å –≤ sessions –∏ —Å–≤–µ—Ä—è—Ç—å

    await send_message(chat_id, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
