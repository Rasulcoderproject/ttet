export const config = {
  api: { bodyParser: false },
};

import fetch from "node-fetch";

// –°–µ—Å—Å–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const sessions = {};
const stats = {};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const OWNER_ID = process.env.MY_TELEGRAM_ID;

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(200).send("OK");

  // –ü–æ–ª—É—á–∞–µ–º "—Å—ã—Ä–æ–µ" —Ç–µ–ª–æ
  const buf = await new Promise((resolve) => {
    let data = "";
    req.on("data", (chunk) => (data += chunk));
    req.on("end", () => resolve(data));
  });

  let update;
  try {
    update = JSON.parse(buf.toString());
  } catch {
    return res.status(400).send("Bad JSON");
  }

  const message = update.message;
  if (!message) return res.status(200).send("ok");

  const chat_id = String(message.chat.id);
  const text = message.text || "";
  const firstName = message.from.first_name || "";
  const username = message.from.username || "";

  // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É
  if (chat_id !== OWNER_ID) {
    await sendMessage(
      OWNER_ID,
      `üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${firstName} (@${username || "–Ω–µ—Ç"})\nID: ${chat_id}\n–¢–µ–∫—Å—Ç: ${text}`
    );
  }

  // –í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ /reply
  if (chat_id === OWNER_ID && text.startsWith("/reply ")) {
    const parts = text.split(" ");
    const targetId = parts[1];
    const replyText = parts.slice(2).join(" ");
    if (!targetId || !replyText) {
      await sendMessage(chat_id, "‚ö† –§–æ—Ä–º–∞—Ç: /reply <chat_id> <—Ç–µ–∫—Å—Ç>");
    } else {
      await sendMessage(targetId, replyText);
      await sendMessage(chat_id, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetId}`);
    }
    return res.status(200).send("ok");
  }

  // ================= –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ =================

  const session = sessions[chat_id] || {};

  function updateStats(chat_id, game, win) {
    if (!stats[chat_id]) stats[chat_id] = {};
    if (!stats[chat_id][game]) stats[chat_id][game] = { played: 0, wins: 0 };
    stats[chat_id][game].played++;
    if (win) stats[chat_id][game].wins++;
  }

  // /start
  if (text === "/start") {
    sessions[chat_id] = {};
    return sendMessage(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∞ –∏–ª–∏ –∏–≥—Ä—É:", {
      keyboard: [
        [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
        [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }, { text: "–ò–≥—Ä—ã üé≤" }]
      ],
      resize_keyboard: true,
    }).then(() => res.send("OK"));
  }

  // /stats
  if (text === "/stats") {
    const userStats = stats[chat_id];
    if (!userStats) {
      await sendMessage(chat_id, "–¢—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª –Ω–∏ –≤ –æ–¥–Ω—É –∏–≥—Ä—É.");
      return res.send("OK");
    }
    let msg = "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n";
    for (const game in userStats) {
      const s = userStats[game];
      msg += `‚Ä¢ ${game}: —Å—ã–≥—Ä–∞–Ω–æ ${s.played}, –ø–æ–±–µ–¥ ${s.wins}\n`;
    }
    await sendMessage(chat_id, msg);
    return res.send("OK");
  }

  // –ò–≥—Ä—ã –º–µ–Ω—é
  if (text === "–ò–≥—Ä—ã üé≤") {
    return sendMessage(chat_id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", {
      keyboard: [
        [{ text: "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ" }, { text: "–ù–∞–π–¥–∏ –ª–æ–∂—å" }],
        [{ text: "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é" }, { text: "–®–∞—Ä–∞–¥–∞" }],
        [{ text: "/start" }, { text: "/stats" }]
      ],
      resize_keyboard: true,
    }).then(() => res.send("OK"));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Ç–µ—Å—Ç–æ–≤
  if (session.correctAnswer) {
    const userAnswer = text.trim().toUpperCase();
    const correct = session.correctAnswer.toUpperCase();
    delete sessions[chat_id].correctAnswer;
    if (userAnswer === correct) {
      await sendMessage(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –•–æ—á–µ—à—å –µ—â—ë –≤–æ–ø—Ä–æ—Å?", {
        keyboard: [
          [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
          [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }, { text: "–ò–≥—Ä—ã üé≤" }]
        ],
        resize_keyboard: true,
      });
    } else {
      await sendMessage(chat_id, `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correct}\n–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?`, {
        keyboard: [
          [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
          [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }, { text: "–ò–≥—Ä—ã üé≤" }]
        ],
        resize_keyboard: true,
      });
    }
    return res.send("OK");
  }

  // –í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∞
  if (["–ò—Å—Ç–æ—Ä–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"].includes(text)) {
    const topic = text;
    const prompt = `
–ó–∞–¥–∞–π –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–º–µ "${topic}".
–§–æ—Ä–º–∞—Ç:
–í–æ–ø—Ä–æ—Å: ...
A) ...
B) ...
C) ...
D) ...
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ... (A-D)
    `.trim();
    const reply = await askGPT(prompt);
    const match = reply.match(/–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*([A-D])/i);
    const correctAnswer = match ? match[1].trim().toUpperCase() : null;
    if (!correctAnswer) {
      await sendMessage(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
      return res.send("OK");
    }
    const questionWithoutAnswer = reply.replace(/–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*[A-D]/i, "").trim();
    sessions[chat_id] = { correctAnswer };
    await sendMessage(chat_id, `üìö –í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ *${topic}*:\n\n${questionWithoutAnswer}`, {
      parse_mode: "Markdown",
    });
    return res.send("OK");
  }

  // ===== –ò–≥—Ä—ã =====
  // ... (—Å—é–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞: "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ", "–ù–∞–π–¥–∏ –ª–æ–∂—å", "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é", "–®–∞—Ä–∞–¥–∞")
  // –Ø –º–æ–≥—É –≤—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ –∫–æ–¥ –±—É–¥–µ—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º.
  // –û–Ω –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞, —Ç–æ–ª—å–∫–æ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π sendMessage(chat_id, ...).

  await sendMessage(chat_id, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.");
  return res.send("OK");
}

// ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======

async function sendMessage(chatId, text, keyboard) {
  return fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_markup: keyboard,
      parse_mode: "Markdown",
    }),
  });
}

async function askGPT(prompt) {
  const res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${OPENROUTER_API_KEY}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      model: "openai/gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7
    })
  });
  const data = await res.json();
  if (!res.ok) {
    console.error("OpenRouter API error:", data);
    return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + (data.error?.message || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
  }
  return data.choices?.[0]?.message?.content || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.";
}
