// api/webhook.js
export const config = {
  api: {
    bodyParser: false, // –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
  },
};

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(200).send("OK");
  }

  try {
    // –ß–∏—Ç–∞–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const buf = await new Promise((resolve) => {
      let data = "";
      req.on("data", (chunk) => (data += chunk));
      req.on("end", () => resolve(data));
    });

    let update;
    try {
      update = JSON.parse(buf.toString());
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err);
      return res.status(400).send("Bad Request");
    }

    console.log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", JSON.stringify(update, null, 2));

    // –û—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ –≤—Å—ë –æ–∫
    return res.status(200).send("ok");

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:", err);
    return res.status(500).send("Internal Server Error");
  }
}
