// pages/api/telegram.js
export const config = {
  api: { bodyParser: false },
};

import fetch from "node-fetch";

// --- –í –ø–∞–º—è—Ç–∏ ---
const sessions = {};
const feed = {};
const stats = {};
const feedbackSessions = {};



// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ Vercel) ---
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || "";
const OWNER_ID = String(process.env.MY_TELEGRAM_ID || "");

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–∏–º–∏—Ç—ã (Telegram: ~4096 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
const TELEGRAM_SEND_MAX = 3900;

// ---- –£—Ç–∏–ª–∏—Ç—ã ----
function readRawBody(req) {
  return new Promise((resolve) => {
    let data = "";
    req.on("data", (chunk) => (data += chunk));
    req.on("end", () => resolve(data));
  });
}

function chunkString(str, size = TELEGRAM_SEND_MAX) {
  const chunks = [];
  for (let i = 0; i < str.length; i += size) {
    chunks.push(str.slice(i, i + size));
  }
  return chunks;
}

function safeJson(obj) {
  try {
    return JSON.stringify(obj, null, 2);
  } catch (e) {
    return String(obj);
  }
}









// ---- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----
export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(200).send("OK");

  const raw = await readRawBody(req);
  let update;
  try {
    update = JSON.parse(raw.toString());
  } catch (e) {
    console.error("Bad JSON:", e);
    return res.status(400).send("Bad JSON");
  }

  console.log("üì© –ü–æ–ª—É—á–µ–Ω update:", update?.update_id);

  // 1) –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º /reply
  const fromId = String(
    update?.message?.from?.id ??
      update?.edited_message?.from?.id ??
      update?.callback_query?.from?.id ??
      update?.inline_query?.from?.id ??
      ""
  );

  const isOwner = fromId && OWNER_ID && fromId === OWNER_ID;

  const msgText =
    update?.message?.text ??
    update?.edited_message?.text ??
    update?.callback_query?.data ??
    update?.inline_query?.query ??
    "";

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reply –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
  if (isOwner && typeof msgText === "string" && msgText.startsWith("/reply ")) {
    const parts = msgText.split(" ");
    const targetId = parts[1];
    const replyText = parts.slice(2).join(" ");
    if (!targetId || !replyText) {
      await sendMessage(OWNER_ID, "‚ö† –§–æ—Ä–º–∞—Ç: /reply <chat_id> <—Ç–µ–∫—Å—Ç>");
    } else {
      await sendMessage(targetId, replyText);
      await sendMessage(OWNER_ID, `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetId}`);
    }
    // —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Ç—ã–≤–∞—Ç—å ‚Äî –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º owner's /reply –≤–ª–∞–¥–µ–ª—å—Ü—É
    return res.status(200).send("ok");
  }

  // 2) –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É –ø–æ–ª–Ω—ã–π JSON –∞–ø–¥–µ–π—Ç–∞ (–µ—Å–ª–∏ –∞–ø–¥–µ–π—Ç –Ω–µ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞)
  if (!isOwner && OWNER_ID) {
    const header = `üì° –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (update_id: ${update.update_id ?? "‚Äî"})\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–ø–¥–µ–π—Ç–∞ (JSON):\n`;
    const body = safeJson(update);
    const payload = header + body;
    const chunks = chunkString(payload, TELEGRAM_SEND_MAX);
    for (const c of chunks) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–æ–Ω–æ-–∫–æ–¥–Ω—ã–π –±–ª–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown (–∫–æ–¥–æ–≤—ã–π –±–ª–æ–∫)
      // –ù–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–æ–π–Ω—ã—Ö backticks –Ω–µ –Ω—É–∂–Ω–æ, –º—ã –ø—Ä–æ—Å—Ç–æ —à–ª–µ–º –∫—É—Å–∫–∏.
      // –ï—Å–ª–∏ parse_mode –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏ ‚Äî –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å parse_mode –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "HTML".
      await sendMessage(OWNER_ID, "```json\n" + c + "\n```", null, "Markdown");
    }
  }

  // 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è (message, edited_message, callback_query)
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç/–¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏–≥—Ä—ã.
  // –ü–æ–¥–¥–µ—Ä–∂–∞–Ω—ã: message.text, edited_message.text, callback_query.data
  const chatId =
    update?.message?.chat?.id ??
    update?.edited_message?.chat?.id ??
    update?.callback_query?.message?.chat?.id ??
    null;

  // –ï—Å–ª–∏ –µ—Å—Ç—å callback_query ‚Äî –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ—ë —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∫—Ä—É—Ç–∏–ª–∫—É"
  if (update.callback_query) {
    const cqid = update.callback_query.id;
    try {
      await answerCallbackQuery(cqid);
    } catch (e) {
      // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }
  }

  if (chatId) {
    const chat_id_str = String(chatId);
    const text =
      update?.message?.text ??
      update?.edited_message?.text ??
      update?.callback_query?.data ??
      "";

    // –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É (–≤ –ø–∞–º—è—Ç–∏)
    try {
      await processGameLogic(chat_id_str, String(text || ""));
    } catch (e) {
      console.error("processGameLogic error:", e);
    }
  }

  return res.status(200).send("ok");
}

// ---- sendMessage wrapper ----
async function sendMessage(chatId, text, reply_markup = null, parse_mode = "Markdown") {
  const body = {
    chat_id: String(chatId),
    text: String(text),
  };
  if (reply_markup) body.reply_markup = reply_markup;
  if (parse_mode) body.parse_mode = parse_mode;

  try {
    const r = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    });
    return r;
  } catch (e) {
    console.error("sendMessage error:", e);
    throw e;
  }
}

async function answerCallbackQuery(callback_query_id) {
  try {
    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ callback_query_id }),
    });
  } catch (e) {
    console.error("answerCallbackQuery error:", e);
  }
}










// ---- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–≤—Å—è, –∫–∞–∫ —É —Ç–µ–±—è) ----
async function processGameLogic(chat_id, text) {
  const session = sessions[chat_id] || {};
  

  if (update?.message?.contact) {
  const contact = update.message.contact;
  await sendMessage(chat_id, `‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä: ${contact.phone_number}`);
  // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É
  await sendMessage(OWNER_ID, `üìû –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:\n–ò–º—è: ${contact.first_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${contact.phone_number}\nID: ${contact.user_id}`);
  return;
}



  function updateStats(localChatId, game, win) {
    if (!stats[localChatId]) stats[localChatId] = {};
    if (!stats[localChatId][game]) stats[localChatId][game] = { played: 0, wins: 0 };
    stats[localChatId][game].played++;
    if (win) stats[localChatId][game].wins++;
  }

// === –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ ===
if (text === "/contact") {
  feed[chat_id]= true;
  await sendMessage(chat_id, "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", {
    keyboard: [
      [{ text: "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact: true }],
      [{ text: "/start" }]
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  });
  return;
}



  // –ü—Ä–∏—ë–º –æ—Ç–∑—ã–≤–∞
  if (feed[chat_id]) {
    delete feed[chat_id];
    const { firstName, username } = sessions[chat_id] || {};
    await sendMessage(
      OWNER_ID,
      `üí¨ –û—Ç–∑—ã–≤ –æ—Ç ${firstName || "–ë–µ–∑ –∏–º–µ–Ω–∏"} (@${username || "–Ω–µ—Ç"})\nID: ${chat_id}\n–¢–µ–∫—Å—Ç: ${text}`
      
    );

    await sendMessage(chat_id, "‚úÖ –í–∞—à –∫–æ–Ω—Ç–∫–∞–∫—Ç!");
    return;
  }






  // Feedback –∫–Ω–æ–ø–∫–∞
  if (text === "/feedback") {
    feedbackSessions[chat_id] = true;
    await sendMessage(chat_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:");
    return;
  }

  // –ü—Ä–∏—ë–º –æ—Ç–∑—ã–≤–∞
  if (feedbackSessions[chat_id]) {
    delete feedbackSessions[chat_id];
    const { firstName, username } = sessions[chat_id] || {};
    await sendMessage(
      OWNER_ID,
      `üí¨ –û—Ç–∑—ã–≤ –æ—Ç ${firstName || "–ë–µ–∑ –∏–º–µ–Ω–∏"} (@${username || "–Ω–µ—Ç"})\nID: ${chat_id}\n–¢–µ–∫—Å—Ç: ${text}`
      
    );



    await sendMessage(
      OWNER_ID,
      `/reply ${chat_id}`
      
    );

    await sendMessage(chat_id, "‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!");
    return;
  }



  // /start
  if (text === "/start") {

 
    sessions[chat_id] = {};
    
    await sendMessage(chat_id, `üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∞ –∏–ª–∏ –∏–≥—Ä—É:`, {
      keyboard: [
        [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
        [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }, { text: "–ò–≥—Ä—ã üé≤" }],
        [{ text: "/feedback" }, { text: "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact: true }]
        
      ],
      resize_keyboard: true,
    });
    return;
  }

  if (text === "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º") {


      await sendMessage(chat_id, "–ü–æ–ª—É—á–µ–Ω");
      return;
    }
  
  
  // /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  if (text === "/stats") {
    const userStats = stats[chat_id];
    if (!userStats) {
      await sendMessage(chat_id, "–¢—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª –Ω–∏ –≤ –æ–¥–Ω—É –∏–≥—Ä—É.");
      return;
    }

    let msg = "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n";
    for (const game in userStats) {
      const s = userStats[game];
      msg += `‚Ä¢ ${game}: —Å—ã–≥—Ä–∞–Ω–æ ${s.played}, –ø–æ–±–µ–¥ ${s.wins}\n`;
    }
    await sendMessage(chat_id, msg);
    return;
  }


  // –ò–≥—Ä—ã –º–µ–Ω—é
  if (text === "–ò–≥—Ä—ã üé≤") {
    await sendMessage(chat_id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", {
      keyboard: [
        [{ text: "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ" }, { text: "–ù–∞–π–¥–∏ –ª–æ–∂—å" }],
        [{ text: "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é" }, { text: "–®–∞—Ä–∞–¥–∞" }],
        [{ text: "/start" }, { text: "/stats" }],
      ],
      resize_keyboard: true,
    });
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–ò—Å—Ç–æ—Ä–∏—è, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π)
  if (session.correctAnswer) {
    const userAnswer = text.trim().toUpperCase();
    const correct = session.correctAnswer.toUpperCase();
    delete sessions[chat_id].correctAnswer;

    if (userAnswer === correct) {
      await sendMessage(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –•–æ—á–µ—à—å –µ—â—ë –≤–æ–ø—Ä–æ—Å?", {
        keyboard: [
          [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
          [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }, { text: "–ò–≥—Ä—ã üé≤" }],
        ],
        resize_keyboard: true,
      });
    } else {
      await sendMessage(
        chat_id,
        `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correct}\n–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?`,
        {
          keyboard: [
            [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
            [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }, { text: "–ò–≥—Ä—ã üé≤" }],
          ],
          resize_keyboard: true,
        }
      );
    }
    return;
  }

  // –í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∞
  if (["–ò—Å—Ç–æ—Ä–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"].includes(text)) {
    const topic = text;
    const prompt = `
–ó–∞–¥–∞–π –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–º–µ "${topic}".
–§–æ—Ä–º–∞—Ç:
–í–æ–ø—Ä–æ—Å: ...
A) ...
B) ...
C) ...
D) ...
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ... (A-D)
    `.trim();

    const reply = await askGPT(prompt);
    const match = reply.match(/–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*([A-D])/i);
    const correctAnswer = match ? match[1].trim().toUpperCase() : null;

    if (!correctAnswer) {
      await sendMessage(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
      return;
    }

    const questionWithoutAnswer = reply.replace(/–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*[A-D]/i, "").trim();
    sessions[chat_id] = { correctAnswer };
    await sendMessage(chat_id, `üìö –í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ *${topic}*:\n\n${questionWithoutAnswer}`, {
      parse_mode: "Markdown",
    });
    return;
  }

  // ===== –ò–≥—Ä—ã: –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ =====
  if (text === "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ") {
    const prompt = `
–ó–∞–≥–∞–¥–∞–π –æ–¥–Ω–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç–∏–≥—Ä, —Å–∞–º–æ–ª—ë—Ç, –ª–∞–º–ø–∞ –∏ —Ç.–¥.). –û–ø–∏—à–∏ –µ–≥–æ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–≥–∞–¥–∞—Ç—å, —á—Ç–æ —ç—Ç–æ. –ù–µ –Ω–∞–∑—ã–≤–∞–π —Å–∞–º–æ —Å–ª–æ–≤–æ. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å: "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: ..." (–Ω–æ —ç—Ç–æ —Å–∫—Ä–æ–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
–§–æ—Ä–º–∞—Ç:
–û–ø–∏—Å–∞–Ω–∏–µ: ...
–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: ...
    `.trim();

    const reply = await askGPT(prompt);
    const match = reply.match(/–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:\s*(.+)/i);
    const hiddenWord = match ? match[1].trim().toUpperCase() : null;
    const description = reply.replace(/–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:\s*.+/i, "").replace(/–û–ø–∏—Å–∞–Ω–∏–µ:\s*/i, "").trim();

    if (!hiddenWord) {
      await sendMessage(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.");
      return;
    }

    sessions[chat_id] = { game: "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ", answer: hiddenWord };
    await sendMessage(chat_id, `üß† –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ:\n\n${description}`);
    return;
  }

  if (session.game === "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ") {
    const userGuess = (text || "").trim().toUpperCase();
    const correctAnswer = session.answer;
    delete sessions[chat_id];

    const win = userGuess === correctAnswer;
    updateStats(chat_id, "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ", win);

    let replyText = "";
    if (win) {
      replyText = "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?";
      if (stats[chat_id]["–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"].wins >= 5) {
        replyText += "\nüèÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª –∞—á–∏–≤–∫—É: ¬´–ú–∞—Å—Ç–µ—Ä —É–≥–∞–¥—ã–≤–∞–Ω–∏—è¬ª!";
      }
    } else {
      replyText = `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ: ${correctAnswer}\n–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?`;
    }

    await sendMessage(chat_id, replyText, {
      keyboard: [[{ text: "–ò–≥—Ä—ã üé≤" }], [{ text: "/start" }]],
      resize_keyboard: true,
    });
    return;
  }

  // ===== –ò–≥—Ä—ã: –ù–∞–π–¥–∏ –ª–æ–∂—å =====
  if (text === "–ù–∞–π–¥–∏ –ª–æ–∂—å") {
    const prompt = `
–ü—Ä–∏–¥—É–º–∞–π —Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã. –î–≤–∞ –∏–∑ –Ω–∏—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–¥–æ–π, –æ–¥–Ω–æ ‚Äî –ª–æ–∂—å—é. –í –∫–æ–Ω—Ü–µ —É–∫–∞–∂–∏, –∫–∞–∫–æ–µ –∏–∑ –Ω–∏—Ö –ª–æ–∂—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–õ–æ–∂—å: ‚Ññ2").
–§–æ—Ä–º–∞—Ç:
1. ...
2. ...
3. ...
–õ–æ–∂—å: ‚Ññ...
    `.trim();

    const reply = await askGPT(prompt);
    const match = reply.match(/–õ–æ–∂—å:\s*‚Ññ?([1-3])/i);
    const falseIndex = match ? match[1] : null;

    if (!falseIndex) {
      await sendMessage(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.");
      return;
    }

    const statementText = reply.replace(/–õ–æ–∂—å:\s*‚Ññ?[1-3]/i, "").trim();
    sessions[chat_id] = { game: "–ù–∞–π–¥–∏ –ª–æ–∂—å", answer: falseIndex };

    await sendMessage(chat_id, `üïµÔ∏è –ù–∞–π–¥–∏ –ª–æ–∂—å:\n\n${statementText}\n\n–û—Ç–≤–µ—Ç –≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä–æ–π (1, 2 –∏–ª–∏ 3).`);
    return;
  }

  if (session.game === "–ù–∞–π–¥–∏ –ª–æ–∂—å") {
    const guess = (text || "").trim();
    const correct = session.answer;
    delete sessions[chat_id];

    const win = guess === correct;
    updateStats(chat_id, "–ù–∞–π–¥–∏ –ª–æ–∂—å", win);

    let replyText = "";
    if (win) {
      replyText = "üéâ –í–µ—Ä–Ω–æ! –¢—ã –Ω–∞—à—ë–ª –ª–æ–∂—å!";
      if (stats[chat_id]["–ù–∞–π–¥–∏ –ª–æ–∂—å"].wins >= 5) {
        replyText += "\nüèÖ –ê—á–∏–≤–∫–∞: ¬´–õ–æ–≤–∫–∞—á¬ª!";
      }
    } else {
      replyText = `‚ùå –ù–µ—Ç, –ª–æ–∂—å –±—ã–ª–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ${correct}. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?`;
    }

    await sendMessage(chat_id, replyText, {
      keyboard: [[{ text: "–ò–≥—Ä—ã üé≤" }], [{ text: "/start" }]],
      resize_keyboard: true,
    });
    return;
  }

  // ===== –ò–≥—Ä—ã: –ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é =====
  if (text === "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é") {
    const prompt = `
–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç—Ä–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è. –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–Ω—É–º–µ—Ä—É–π.
–§–æ—Ä–º–∞—Ç:
–ù–∞—á–∞–ª–æ: ...
1. ...
2. ...
3. ...
    `.trim();

    const reply = await askGPT(prompt);
    const match = reply.match(/–ù–∞—á–∞–ª–æ:\s*(.+?)(?:\n|$)/i);
    const intro = match ? match[1].trim() : null;

    if (!intro) {
      await sendMessage(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.");
      return;
    }

    sessions[chat_id] = { game: "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é" };
    await sendMessage(chat_id, `üìñ –ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é:\n\n${reply}\n\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (1, 2 –∏–ª–∏ 3).`);
    return;
  }

  if (session.game === "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é") {
    const choice = (text || "").trim();
    const win = ["1", "2", "3"].includes(choice);
    delete sessions[chat_id];
    updateStats(chat_id, "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é", win);

    let replyText = win ? "üéâ –ö–ª–∞—Å—Å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ!" : "‚ùå –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.";

    if (win && stats[chat_id]["–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—è"].wins >= 5) {
      replyText += "\nüèÖ –ê—á–∏–≤–∫–∞: ¬´–°–∫–∞–∑–æ—á–Ω–∏–∫¬ª!";
    }

    await sendMessage(chat_id, replyText, {
      keyboard: [[{ text: "–ò–≥—Ä—ã üé≤" }], [{ text: "/start" }]],
      resize_keyboard: true,
    });
    return;
  }

  // ===== –ò–≥—Ä—ã: –®–∞—Ä–∞–¥–∞ =====
  if (text === "–®–∞—Ä–∞–¥–∞") {
    const prompt = `
–ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É —à–∞—Ä–∞–¥—É (–∑–∞–≥–∞–¥–∫—É), –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π, –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –¥–∞—ë—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ. –í –∫–æ–Ω—Ü–µ –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç.
–§–æ—Ä–º–∞—Ç:
1) ...
2) ...
3) ...
–û—Ç–≤–µ—Ç: ...
    `.trim();

    const reply = await askGPT(prompt);
    const match = reply.match(/–û—Ç–≤–µ—Ç:\s*(.+)/i);
    const answer = match ? match[1].trim().toUpperCase() : null;

    if (!answer) {
      await sendMessage(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞—Ä–∞–¥—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.");
      return;
    }

    const riddleText = reply.replace(/–û—Ç–≤–µ—Ç:\s*.+/i, "").trim();
    sessions[chat_id] = { game: "–®–∞—Ä–∞–¥–∞", answer };
    await sendMessage(chat_id, `üß© –®–∞—Ä–∞–¥–∞:\n\n${riddleText}\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç.`);
    return;
  }

  if (session.game === "–®–∞—Ä–∞–¥–∞") {
    const guess = (text || "").trim().toUpperCase();
    const correct = session.answer;
    delete sessions[chat_id];

    const win = guess === correct;
    updateStats(chat_id, "–®–∞—Ä–∞–¥–∞", win);

    let replyText = "";
    if (win) {
      replyText = "üéâ –ú–æ–ª–æ–¥–µ—Ü! –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª!";
      if (stats[chat_id]["–®–∞—Ä–∞–¥–∞"].wins >= 5) {
        replyText += "\nüèÖ –ê—á–∏–≤–∫–∞: ¬´–®–∞—Ä–∞–¥–∏—Å—Ç¬ª!";
      }
    } else {
      replyText = `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correct}. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?`;
    }

    await sendMessage(chat_id, replyText, {
      keyboard: [[{ text: "–ò–≥—Ä—ã üé≤" }], [{ text: "/start" }]],
      resize_keyboard: true,
    });
    return;
  }

  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
  await sendMessage(chat_id, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.");
}

// ---- askGPT —á–µ—Ä–µ–∑ OpenRouter (–∫–∞–∫ —É —Ç–µ–±—è) ----
async function askGPT(prompt) {
  if (!OPENROUTER_API_KEY) return "–û—à–∏–±–∫–∞: –Ω–µ—Ç OPENROUTER_API_KEY";

  try {
    const res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENROUTER_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "openai/gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
      }),
    });
    const data = await res.json();
    if (!res.ok) {
      console.error("OpenRouter API error:", data);
      return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + (data.error?.message || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
    }
    return data.choices?.[0]?.message?.content || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.";
  } catch (e) {
    console.error("askGPT error:", e);
    return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.";
  }
}