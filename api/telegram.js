const fetch = require("node-fetch");

const sessions = {};
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;

module.exports = async (req, res) => {
  if (req.method !== "POST") return res.status(405).send("Method Not Allowed");

  const body = req.body;
  const message = body.message;
  const text = message?.text;
  const chat_id = message?.chat?.id;

  const sendMessage = (text, keyboard) =>
    fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id, text, reply_markup: keyboard }),
    });

  const session = sessions[chat_id] || {};

  // –°—Ç–∞—Ä—Ç
  if (text === "/start") {
    sessions[chat_id] = {};
    return await sendMessage("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∞:", {
      keyboard: [
        [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
        [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }]
      ],
      resize_keyboard: true,
    }).then(() => res.send("OK"));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (session.correctAnswer) {
    const userAnswer = text.trim().toUpperCase();
    const correct = session.correctAnswer.toUpperCase();
    delete sessions[chat_id].correctAnswer;

    if (userAnswer === correct) {
      await sendMessage("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –•–æ—á–µ—à—å –µ—â—ë –≤–æ–ø—Ä–æ—Å?", {
        keyboard: [
          [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
          [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }]
        ],
        resize_keyboard: true,
      });
    } else {
      await sendMessage(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correct}\n–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?`, {
        keyboard: [
          [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
          [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }]
        ],
        resize_keyboard: true,
      });
    }

    return res.send("OK");
  }

  // –í—ã–±–æ—Ä —Ç–µ–º—ã
  if (["–ò—Å—Ç–æ—Ä–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"].includes(text)) {
    const topic = text;
    const prompt = `
–ó–∞–¥–∞–π –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–º–µ "${topic}".
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–í–æ–ø—Ä–æ—Å: ...
A) ...
B) ...
C) ...
D) ...
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ... (–Ω–∞–ø—Ä–∏–º–µ—Ä: A, B –∏ —Ç.–¥.)
    `.trim();

    const reply = await askGPT(prompt);

    const match = reply.match(/–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*([A-D])/i);
    const correctAnswer = match ? match[1].trim().toUpperCase() : null;

    if (!correctAnswer) {
      await sendMessage("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
      return res.send("OK");
    }

    const questionWithoutAnswer = reply.replace(/–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*[A-D]/i, "").trim();

    sessions[chat_id] = { correctAnswer };
    await sendMessage(`üìö –í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ *${topic}*:\n\n${questionWithoutAnswer}`, {
      parse_mode: "Markdown",
    });

    return res.send("OK");
  }

  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
  await sendMessage("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.");
  return res.send("OK");
};

// GPT —á–µ—Ä–µ–∑ OpenRouter
async function askGPT(prompt) {
  const res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${DEEPSEEK_API_KEY}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      model: "openai/gpt-3.5-turbo",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7
    })
  });

  const data = await res.json();

  if (!res.ok) {
    console.error("OpenRouter API error:", data);
    return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + (data.error?.message || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
  }

  return data.choices?.[0]?.message?.content || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.";
}
