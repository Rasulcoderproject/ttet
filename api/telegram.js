const fetch = require("node-fetch");

// –ò—Å–ø–æ–ª—å–∑—É–µ–º Vercel KV
const { kv } = require("@vercel/kv");

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;

module.exports = async (req, res) => {
  if (req.method !== "POST") return res.status(405).send("Method Not Allowed");

  const body = req.body;
  const message = body.message;
  const text = message?.text;
  const chat_id = message?.chat?.id;

  if (!message || !text || !chat_id) {
    return res.status(200).send("No message to process.");
  }

  const sendMessage = async (text, keyboard) => {
    try {
      const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id, text, reply_markup: keyboard, parse_mode: "Markdown" }),
      });

      const data = await response.json();
      if (!response.ok) {
        console.error("Telegram API error:", data);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", err);
    }
  };

  if (text === "/start") {
    await kv.del(`session:${chat_id}`);
    await sendMessage("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∞:", {
      keyboard: [
        [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
        [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }]
      ],
      resize_keyboard: true,
    });
    return res.send("OK");
  }

  const sessionKey = `session:${chat_id}`;
  const session = await kv.get(sessionKey);

  if (session?.correctAnswer) {
    const userAnswer = text.trim().toUpperCase();
    const correct = session.correctAnswer.toUpperCase();
    await kv.del(sessionKey); // –æ—á–∏—â–∞–µ–º

    if (userAnswer === correct) {
      await sendMessage("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –•–æ—á–µ—à—å –µ—â—ë –≤–æ–ø—Ä–æ—Å?", {
        keyboard: [
          [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
          [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }]
        ],
        resize_keyboard: true,
      });
    } else {
      await sendMessage(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correct}\n–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?`, {
        keyboard: [
          [{ text: "–ò—Å—Ç–æ—Ä–∏—è" }, { text: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" }],
          [{ text: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" }]
        ],
        resize_keyboard: true,
      });
    }

    return res.send("OK");
  }

  if (["–ò—Å—Ç–æ—Ä–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"].includes(text)) {
    const topic = text;
    const prompt = `
–ó–∞–¥–∞–π –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–º–µ "${topic}".
–§–æ—Ä–º–∞—Ç:
–í–æ–ø—Ä–æ—Å: ...
A) ...
B) ...
C) ...
D) ...
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: X
    `.trim();

    let reply;
    try {
      reply = await askDeepSeek(prompt);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ DeepSeek:", error);
      await sendMessage("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
      return res.send("OK");
    }

    const match = reply.match(/–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*([A-D])/i);
    const correctAnswer = match ? match[1].trim().toUpperCase() : null;

    if (!correctAnswer) {
      await sendMessage("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
      return res.send("OK");
    }

    const questionWithoutAnswer = reply.replace(/–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*[A-D]/i, "").trim();

    await kv.set(sessionKey, { correctAnswer });
    await sendMessage(`üìö –í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ *${topic}*:\n\n${questionWithoutAnswer}`);

    return res.send("OK");
  }

  await sendMessage("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.");
  return res.send("OK");
};

// GPT —á–µ—Ä–µ–∑ DeepSeek API
async function askDeepSeek(prompt) {
  const res = await fetch("https://api.deepseek.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${DEEPSEEK_API_KEY}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      model: "deepseek-chat",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7
    })
  });

  const data = await res.json();

  if (!res.ok) {
    console.error("DeepSeek API error:", data);
    throw new Error(data.error?.message || "Unknown DeepSeek error");
  }

  return data.choices?.[0]?.message?.content || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.";
}
