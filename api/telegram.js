const fetch = require("node-fetch");
const nodemailer = require("nodemailer");

const sessions = {};

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.FEEDBACK_EMAIL,
    pass: process.env.FEEDBACK_EMAIL_PASS,
  },
});

module.exports = async (req, res) => {
  if (req.method !== "POST") return res.status(405).send("Method Not Allowed");

  const message = req.body?.message;
  const text = message?.text?.trim();
  const chat_id = message?.chat?.id;

  if (!chat_id || !text) return res.send("No message content");

  const session = sessions[chat_id] || {};

  async function sendMessage(text) {
    try {
      const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id, text }),
      });

      const data = await response.json();
      if (!data.ok) console.error("Telegram error:", data);
    } catch (err) {
      console.error("sendMessage error:", err);
    }
  }

  // === –ù–∞—á–∞–ª–æ: –∫–æ–º–∞–Ω–¥–∞ /feedback ===
  if (text === "/feedback" || text === "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π") {
    sessions[chat_id] = { step: "name" };
    await sendMessage("üë§ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?");
    return res.send("OK");
  }

  // === –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ===
  if (session.step === "name") {
    session.name = text;
    session.step = "age";
    await sendMessage("üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?");
    return res.send("OK");
  }

  if (session.step === "age") {
    if (!/^\d{1,3}$/.test(text)) {
      await sendMessage("‚ö†Ô∏è –£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.");
      return res.send("OK");
    }

    session.age = text;
    session.step = "comment";
    await sendMessage("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:");
    return res.send("OK");
  }

  if (session.step === "comment") {
    const { name, age } = session;
    const comment = text;
    delete sessions[chat_id]; // –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Å–µ—Å—Å–∏—é

    try {
      await transporter.sendMail({
        from: `"Feedback Bot" <${process.env.FEEDBACK_EMAIL}>`,
        to: process.env.FEEDBACK_RECEIVER || process.env.FEEDBACK_EMAIL,
        subject: `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç ${name} (${age} –ª–µ—Ç) ‚Äî Telegram ID: ${chat_id}`,
        text: `–ò–º—è: ${name}\n–í–æ–∑—Ä–∞—Å—Ç: ${age}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n${comment}`,
      });

      await sendMessage("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:", error);
      await sendMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }

    return res.send("OK");
  }

  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
  await sendMessage("–ù–∞–ø–∏—à–∏ /feedback –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π¬ª.");
  return res.send("OK");
};
